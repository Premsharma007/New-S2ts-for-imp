Default Reference Loading System
Excellent idea! This is a professional approach for handling reference files. Here's the implementation:

1. Directory Structure:
text
data/
‚îú‚îÄ‚îÄ projects/
‚îî‚îÄ‚îÄ Reference-Txt-Aud/
    ‚îú‚îÄ‚îÄ reference_text.txt
    ‚îî‚îÄ‚îÄ reference_audio.mp3 (or .wav)
2. Configuration Addition:
python
# In config.py
REFERENCE_DIR = DATA_DIR / "Reference-Txt-Aud"
DEFAULT_REF_TEXT_FILE = REFERENCE_DIR / "reference_text.txt"
DEFAULT_REF_AUDIO_FILE = REFERENCE_DIR / "reference_audio.wav"
3. Reference Loader Utility:
python
# In utils/helpers.py
def load_default_references():
    """Load default reference text and audio if they exist"""
    ref_text = ""
    ref_audio = None
    
    # Load default reference text
    if DEFAULT_REF_TEXT_FILE.exists():
        try:
            ref_text = read_text(DEFAULT_REF_TEXT_FILE)
            print(f"‚úÖ Loaded default reference text: {len(ref_text)} characters")
        except Exception as e:
            print(f"‚ùå Failed to load default reference text: {e}")
    
    # Load default reference audio
    if DEFAULT_REF_AUDIO_FILE.exists():
        try:
            # For Gradio, we need to return the file path
            ref_audio = str(DEFAULT_REF_AUDIO_FILE)
            print(f"‚úÖ Loaded default reference audio: {DEFAULT_REF_AUDIO_FILE}")
        except Exception as e:
            print(f"‚ùå Failed to load default reference audio: {e}")
    
    return ref_text, ref_audio
4. UI Toggle and Auto-Load Logic:
python
# In main.py - UI section
with gr.Group(elem_classes="shadow-card"):
    gr.Markdown("### üéµ TTS Reference")
    
    # Default reference toggle
    load_default_ref = gr.Checkbox(
        label="Load Default Reference", 
        value=False,
        info="Automatically load reference from Reference-Txt-Aud folder"
    )
    
    ref_audio = gr.Audio(type="filepath", label="Reference Audio", interactive=True)
    ref_text = gr.Textbox(
        lines=3, 
        label="Reference Text",
        placeholder="Enter the text that matches the reference audio",
        interactive=True
    )

# Auto-load functionality
def toggle_default_ref(load_default):
    """Handle default reference loading toggle"""
    if load_default:
        # Load default references
        default_text, default_audio = load_default_references()
        return {
            ref_text: default_text,
            ref_audio: default_audio if default_audio else None,
            load_default_ref: True  # Keep checkbox checked
        }
    else:
        # Clear references
        return {
            ref_text: "",
            ref_audio: None,
            load_default_ref: False  # Keep checkbox unchecked
        }

# Connect toggle to function
load_default_ref.change(
    fn=toggle_default_ref,
    inputs=[load_default_ref],
    outputs=[ref_text, ref_audio, load_default_ref]
)
5. Startup Auto-Load:
python
# In main.py - Check if default references exist at startup
def check_default_references_exist():
    """Check if default reference files exist and return status"""
    text_exists = DEFAULT_REF_TEXT_FILE.exists()
    audio_exists = DEFAULT_REF_AUDIO_FILE.exists()
    
    return text_exists and audio_exists  # Both must exist

# Add this to UI creation
def create_ui():
    # ... existing code ...
    
    # Check if default references exist at startup
    defaults_exist = check_default_references_exist()
    
    with gr.Group(elem_classes="shadow-card"):
        gr.Markdown("### üéµ TTS Reference")
        
        load_default_ref = gr.Checkbox(
            label="Load Default Reference", 
            value=False,
            interactive=defaults_exist,  # Disable if no defaults
            info="Automatically load reference from Reference-Txt-Aud folder" + 
                 (" (Files available)" if defaults_exist else " (No default files found)")
        )
        
        # ... rest of reference UI ...
6. File Validation:
python
# In utils/helpers.py
def validate_reference_files():
    """Check if default reference files are valid"""
    issues = []
    
    if not REFERENCE_DIR.exists():
        issues.append("Reference directory does not exist")
        return issues
    
    # Check text file
    if not DEFAULT_REF_TEXT_FILE.exists():
        issues.append("Default reference text file not found")
    else:
        text = read_text(DEFAULT_REF_TEXT_FILE)
        if len(text.strip()) < 10:  # Minimum length check
            issues.append("Reference text is too short")
    
    # Check audio file
    if not DEFAULT_REF_AUDIO_FILE.exists():
        issues.append("Default reference audio file not found")
    else:
        # Basic audio file validation
        try:
            import soundfile as sf
            data, samplerate = sf.read(str(DEFAULT_REF_AUDIO_FILE))
            if len(data) < 24000:  # At least 1 second at 24kHz
                issues.append("Reference audio is too short")
        except Exception as e:
            issues.append(f"Invalid audio file: {e}")
    
    return issues
7. Enhanced UI with Validation:
python
# Add validation indicators to UI
def create_ui():
    # ... existing code ...
    
    # Validation indicators
    ref_validation = gr.HTML(
        value=generate_validation_html(),
        visible=False
    )
    
    # Update validation on toggle
    def update_validation(load_default):
        if load_default:
            issues = validate_reference_files()
            if issues:
                warning_html = f"""
                <div style='color: #fbbf24; background: #1e293b; padding: 10px; border-radius: 5px; margin: 10px 0;'>
                    <strong>‚ö†Ô∏è Reference Validation Issues:</strong>
                    <ul style='margin: 5px 0;'>
                        {"".join(f"<li>{issue}</li>" for issue in issues)}
                    </ul>
                </div>
                """
                return gr.update(value=warning_html, visible=True)
        return gr.update(visible=False)
    
    load_default_ref.change(
        fn=update_validation,
        inputs=[load_default_ref],
        outputs=[ref_validation]
    )
8. Setup Script:
python
# In setup_references.py (optional)
def setup_reference_directory():
    """Create reference directory structure with sample files"""
    ensure_dir(REFERENCE_DIR)
    
    # Create sample reference text
    sample_text = """This is a sample reference text for TTS voice cloning.
The audio file should contain a clean recording of this text spoken
in the desired target voice and language."""
    
    if not DEFAULT_REF_TEXT_FILE.exists():
        write_text(DEFAULT_REF_TEXT_FILE, sample_text)
        print(f"‚úÖ Created sample reference text: {DEFAULT_REF_TEXT_FILE}")
    
    print("üìÅ Reference directory setup complete.")
    print("Please add your reference audio file as:")
    print(f"   {DEFAULT_REF_AUDIO_FILE}")
Usage Flow:
User creates Reference-Txt-Aud folder with their files

On UI startup, system checks if default files exist

User toggles "Load Default Reference" checkbox

System automatically populates both text and audio fields

Validation warnings shown if files have issues

User can still override the defaults if needed